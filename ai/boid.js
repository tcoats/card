// Generated by CoffeeScript 1.7.1
(function() {
  define(['inject'], function(inject) {
    var Boid;
    return Boid = (function() {
      function Boid(p, v, a, n) {
        inject.one('register coordinates')(this, p);
        inject.one('register physics')(this, v, a);
        inject.one('register display')(this, n);
        this.maxspeed = 3;
        this.maxsteeringforce = 0.05;
      }

      Boid.prototype.step = function(boids) {
        this.separate();
        this.align();
        return this.cohere();
      };

      Boid.prototype.separate = function() {
        var boid, count, d, diff, steer, _i, _len, _ref;
        steer = createVector(0, 0);
        count = 0;
        _ref = inject.one('select by distance')(this.c.p, 25);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          boid = _ref[_i];
          if (boid === this) {
            continue;
          }
          diff = p5.Vector.sub(this.c.p, boid.c.p);
          d = diff.mag();
          diff.normalize();
          diff.div(d);
          steer.add(diff);
          count++;
        }
        if (count > 0) {
          steer.div(count);
        }
        if (steer.mag() === 0) {
          return;
        }
        steer.normalize();
        steer.mult(this.maxspeed);
        steer.sub(this.p.v);
        steer.limit(this.maxsteeringforce);
        steer.mult(2.5);
        return inject.one('apply force')(this, steer);
      };

      Boid.prototype.align = function() {
        var boid, count, steer, sum, _i, _len, _ref;
        sum = createVector(0, 0);
        count = 0;
        _ref = inject.one('select by distance')(this.c.p, 50);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          boid = _ref[_i];
          if (boid === this) {
            continue;
          }
          sum.add(boid.p.v);
          count++;
        }
        if (count === 0) {
          return createVector(0, 0);
        }
        sum.div(count);
        sum.normalize();
        sum.mult(this.maxspeed);
        steer = p5.Vector.sub(sum, this.p.v);
        steer.limit(this.maxsteeringforce);
        steer.mult(1.0);
        return inject.one('apply force')(this, steer);
      };

      Boid.prototype.cohere = function() {
        var boid, count, sum, _i, _len, _ref;
        sum = createVector(0, 0);
        count = 0;
        _ref = inject.one('select by distance')(this.c.p, 100);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          boid = _ref[_i];
          if (boid === this) {
            continue;
          }
          sum.add(boid.c.p);
          count++;
        }
        if (count === 0) {
          return createVector(0, 0);
        }
        sum.div(count);
        return this.seek(sum);
      };

      Boid.prototype.seek = function(target) {
        var desired, steer;
        desired = p5.Vector.sub(target, this.c.p);
        desired.normalize();
        desired.mult(this.maxspeed);
        steer = p5.Vector.sub(desired, this.p.v);
        steer.limit(this.maxsteeringforce);
        steer.mult(1.0);
        return inject.one('apply force')(this, steer);
      };

      return Boid;

    })();
  });

}).call(this);
