// Generated by CoffeeScript 1.7.1
(function() {
  define(['colors'], function(colors) {
    var Boid;
    return Boid = (function() {
      function Boid(x, y) {
        this.a = createVector(0, 0);
        this.v = p5.Vector.random2D();
        this.p = createVector(x, y);
        this.r = 3.0;
        this.maxspeed = 3;
        this.maxsteeringforce = 0.05;
      }

      Boid.prototype.run = function(boids) {
        this.flock(boids);
        this.update();
        this.borders();
        return this.render();
      };

      Boid.prototype.render = function() {
        fill(colors.bg);
        stroke(colors.blue);
        return ellipse(this.p.x, this.p.y, 16, 16);
      };

      Boid.prototype.flock = function(boids) {
        var ali, coh, sep;
        sep = this.separate(boids);
        ali = this.align(boids);
        coh = this.cohesion(boids);
        sep.mult(2.5);
        ali.mult(1.0);
        coh.mult(1.0);
        this.apply(sep);
        this.apply(ali);
        return this.apply(coh);
      };

      Boid.prototype.update = function() {
        this.v.add(this.a);
        this.v.limit(this.maxspeed);
        this.p.add(this.v);
        return this.a.mult(0);
      };

      Boid.prototype.apply = function(force) {
        return this.a.add(force);
      };

      Boid.prototype.seek = function(target) {
        var desired, steer;
        desired = p5.Vector.sub(target, this.p);
        desired.normalize();
        desired.mult(this.maxspeed);
        steer = p5.Vector.sub(desired, this.v);
        steer.limit(this.maxsteeringforce);
        return steer;
      };

      Boid.prototype.borders = function() {
        if (this.p.x < -this.r) {
          this.p.x = width + this.r;
        }
        if (this.p.x > width + this.r) {
          this.p.x = -this.r;
        }
        if (this.p.y < -this.r) {
          this.p.y = height + this.r;
        }
        if (this.p.y > height + this.r) {
          return this.p.y = -this.r;
        }
      };

      Boid.prototype.separate = function(boids) {
        var boid, count, d, desiredseparation, diff, steer, _i, _len;
        desiredseparation = 25.0;
        steer = createVector(0, 0);
        count = 0;
        for (_i = 0, _len = boids.length; _i < _len; _i++) {
          boid = boids[_i];
          d = p5.Vector.dist(this.p, boid.p);
          if (d === 0 || d >= desiredseparation) {
            continue;
          }
          diff = p5.Vector.sub(this.p, boid.p);
          diff.normalize();
          diff.div(d);
          steer.add(diff);
          count++;
        }
        if (count > 0) {
          steer.div(count);
        }
        if (steer.mag() > 0) {
          steer.normalize();
          steer.mult(this.maxspeed);
          steer.sub(this.v);
          steer.limit(this.maxsteeringforce);
        }
        return steer;
      };

      Boid.prototype.align = function(boids) {
        var boid, count, d, neighbordist, steer, sum, _i, _len;
        neighbordist = 50;
        sum = createVector(0, 0);
        count = 0;
        for (_i = 0, _len = boids.length; _i < _len; _i++) {
          boid = boids[_i];
          d = p5.Vector.dist(this.p, boid.p);
          if (d > 0 && d < neighbordist) {
            sum.add(boid.v);
            count++;
          }
        }
        if (count === 0) {
          return createVector(0, 0);
        }
        sum.div(count);
        sum.normalize();
        sum.mult(this.maxspeed);
        steer = p5.Vector.sub(sum, this.v);
        steer.limit(this.maxsteeringforce);
        return steer;
      };

      Boid.prototype.cohesion = function(boids) {
        var boid, count, d, neighbordist, sum, _i, _len;
        neighbordist = 50;
        sum = createVector(0, 0);
        count = 0;
        for (_i = 0, _len = boids.length; _i < _len; _i++) {
          boid = boids[_i];
          d = p5.Vector.dist(this.p, boid.p);
          if (d > 0 && d < neighbordist) {
            sum.add(boid.p);
            count++;
          }
        }
        if (count === 0) {
          return createVector(0, 0);
        }
        sum.div(count);
        return this.seek(sum);
      };

      return Boid;

    })();
  });

}).call(this);
