// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['inject', 'p2'], function(inject, p2) {
    var Physics;
    Physics = (function() {
      function Physics() {
        this.eachbydistance = __bind(this.eachbydistance, this);
        this.calculatesteering = __bind(this.calculatesteering, this);
        this.calculateseek = __bind(this.calculateseek, this);
        this._steer = __bind(this._steer, this);
        this.limittomaxvelocity = __bind(this.limittomaxvelocity, this);
        this.scaletomaxvelocity = __bind(this.scaletomaxvelocity, this);
        this.apply = __bind(this.apply, this);
        this.unit = __bind(this.unit, this);
        this.boid = __bind(this.boid, this);
        this.register = __bind(this.register, this);
        this.step = __bind(this.step, this);
        this.maxvelocity = 100;
        this.defaultsteeringforce = 1200;
        this.entities = [];
        this.world = new p2.World({
          gravity: [0, 0]
        });
        inject.bind('step', this.step);
        inject.bind('register physics', this.register);
        inject.bind('apply force', this.apply);
        inject.bind('scale to max velocity', this.scaletomaxvelocity);
        inject.bind('limit to max velocity', this.limittomaxvelocity);
        inject.bind('calculate seeking', this.calculateseek);
        inject.bind('calculate steering', this.calculatesteering);
        inject.bind('each by distance', this.eachbydistance);
      }

      Physics.prototype.step = function() {
        var entity, length, _i, _len, _ref, _results;
        this.world.step(1 / 60);
        _ref = this.entities;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          entity = _ref[_i];
          length = p2.vec2.len(entity.b.velocity);
          if (length > this.maxvelocity) {
            p2.vec2.normalize(entity.b.velocity, entity.b.velocity);
            p2.vec2.scale(entity.b.velocity, entity.b.velocity, this.maxvelocity);
          }
          if (entity.b.position[0] < -10) {
            entity.b.position[0] = width + 10;
          }
          if (entity.b.position[0] > width + 10) {
            entity.b.position[0] = -10;
          }
          if (entity.b.position[1] < -10) {
            entity.b.position[1] = height + 10;
          }
          if (entity.b.position[1] > height + 10) {
            _results.push(entity.b.position[1] = -10);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      Physics.prototype.register = function(entity, n, p, v) {
        if (this[n] != null) {
          return this[n](entity, p, v);
        }
      };

      Physics.prototype.boid = function(entity, p, v) {
        var body, shape;
        body = new p2.Body({
          mass: 1,
          position: p,
          velocity: v
        });
        body.damping = 0;
        shape = new p2.Circle(8);
        body.addShape(shape);
        this.world.addBody(body);
        return this.entities.push(entity.phys = {
          b: body,
          s: shape,
          e: function() {
            return entity;
          }
        });
      };

      Physics.prototype.unit = function(entity, p, v) {
        var body, shape;
        body = new p2.Body({
          mass: 1,
          position: p,
          velocity: v
        });
        body.damping = 0.9;
        shape = new p2.Circle(8);
        body.addShape(shape);
        this.world.addBody(body);
        return this.entities.push(entity.phys = {
          b: body,
          s: shape,
          e: function() {
            return entity;
          }
        });
      };

      Physics.prototype.apply = function(entity, f) {
        return p2.vec2.add(entity.phys.b.force, entity.phys.b.force, f);
      };

      Physics.prototype.scaletomaxvelocity = function(velocity) {
        p2.vec2.normalize(velocity, velocity);
        return p2.vec2.scale(velocity, velocity, this.maxvelocity);
      };

      Physics.prototype.limittomaxvelocity = function(velocity) {
        var len;
        len = p2.vec2.len(velocity);
        len = Math.min(len, this.maxvelocity);
        p2.vec2.normalize(velocity, velocity);
        return p2.vec2.scale(velocity, velocity, len);
      };

      Physics.prototype._steer = function(source, target, scale) {
        var steering;
        steering = [0, 0];
        p2.vec2.sub(steering, target, source);
        p2.vec2.normalize(steering, steering);
        p2.vec2.scale(steering, steering, scale);
        return steering;
      };

      Physics.prototype.calculateseek = function(source, target) {
        return this._steer(source, target, this.maxvelocity);
      };

      Physics.prototype.calculatesteering = function(source, target) {
        return this._steer(source, target, this.defaultsteeringforce);
      };

      Physics.prototype.eachbydistance = function(p, r, cb) {
        var distance, entity, _i, _len, _ref, _results;
        _ref = this.entities;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          entity = _ref[_i];
          distance = p2.vec2.dist(p, entity.b.position);
          if (distance > r) {
            continue;
          }
          _results.push(cb(distance, entity.e()));
        }
        return _results;
      };

      return Physics;

    })();
    return new Physics();
  });

}).call(this);
