// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['inject', 'p2'], function(inject, p2) {
    var Physics;
    Physics = (function() {
      function Physics() {
        this.eachbydistance = __bind(this.eachbydistance, this);
        this.calculatesteering = __bind(this.calculatesteering, this);
        this.apply = __bind(this.apply, this);
        this.register = __bind(this.register, this);
        this.step = __bind(this.step, this);
        this.maxspeed = 4;
        this.maxsteeringforce = 0.05;
        this.entities = [];
        inject.bind('step', this.step);
        inject.bind('register physics', this.register);
        inject.bind('apply force', this.apply);
        inject.bind('calculate steering', this.calculatesteering);
        inject.bind('each by distance', this.eachbydistance);
      }

      Physics.prototype.step = function() {
        var entity, _i, _len, _ref, _results;
        _ref = this.entities;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          entity = _ref[_i];
          entity.v.add(entity.a);
          entity.a.mult(0);
          entity.a.limit(this.maxspeed);
          inject.one('rel stat')(entity.e(), {
            distancetravelled: entity.v
          });
          entity.p.add(entity.v);
          if (entity.p.x < -10) {
            entity.p.x = width + 10;
          }
          if (entity.p.x > width + 10) {
            entity.p.x = -10;
          }
          if (entity.p.y < -10) {
            entity.p.y = height + 10;
          }
          if (entity.p.y > height + 10) {
            _results.push(entity.p.y = -10);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      Physics.prototype.register = function(entity, n, p, v) {
        return this.entities.push(entity.phys = {
          n: n,
          p: p,
          v: v,
          a: createVector(0, 0),
          e: function() {
            return entity;
          }
        });
      };

      Physics.prototype.apply = function(entity, f) {
        return entity.phys.a.add(f);
      };

      Physics.prototype.calculatesteering = function(entity, steer) {
        var result;
        result = steer.get();
        result.normalize();
        result.mult(this.maxspeed);
        result.sub(entity.phys.v);
        result.limit(this.maxsteeringforce);
        return result;
      };

      Physics.prototype.eachbydistance = function(p, r, cb) {
        var distance, entity, _i, _len, _ref, _results;
        _ref = this.entities;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          entity = _ref[_i];
          distance = p5.Vector.dist(p, entity.p);
          if (distance > r) {
            continue;
          }
          _results.push(cb(distance, entity.e()));
        }
        return _results;
      };

      return Physics;

    })();
    return new Physics();
  });

}).call(this);
