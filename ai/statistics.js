// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['inject'], function(inject) {
    var Statistics;
    Statistics = (function() {
      function Statistics() {
        this.statisticnotification = __bind(this.statisticnotification, this);
        this.relativestatistic = __bind(this.relativestatistic, this);
        this.absolutestatistic = __bind(this.absolutestatistic, this);
        this.register = __bind(this.register, this);
        this.step = __bind(this.step, this);
        this.entities = [];
        this.derived = {};
        inject.bind('step', this.step);
        inject.bind('register statistics', this.register);
        inject.bind('abs stat', this.absolutestatistic);
        inject.bind('rel stat', this.relativestatistic);
        inject.bind('stat notify', this.statisticnotification);
      }

      Statistics.prototype.step = function() {};

      Statistics.prototype.register = function(entity) {
        entity.stats = {
          e: function() {
            return entity;
          }
        };
        return this.entities.push(entity.stats);
      };

      Statistics.prototype.absolutestatistic = function(entity, values) {
        var current, derived, key, stats, value, _i, _len, _ref, _results;
        stats = entity.stats;
        _results = [];
        for (key in values) {
          value = values[key];
          if (stats[key] == null) {
            stats[key] = 0;
          }
          if (this.derived[key] != null) {
            current = stats[key];
            _ref = this.derived[key];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              derived = _ref[_i];
              derived(entity, current, value);
            }
          }
          _results.push(stats[key] = value);
        }
        return _results;
      };

      Statistics.prototype.relativestatistic = function(entity, values) {
        var key, p, stats, value, _results;
        stats = entity.stats;
        _results = [];
        for (key in values) {
          value = values[key];
          if (stats[key] == null) {
            stats[key] = 0;
          }
          p = {};
          p[key] = stats[key] + value;
          _results.push(this.absolutestatistic(entity, p));
        }
        return _results;
      };

      Statistics.prototype.statisticnotification = function(key, cb) {
        if (this.derived[key] == null) {
          this.derived[key] = [];
        }
        this.derived[key].push(cb);
        return {
          off: (function(_this) {
            return function() {
              var index;
              index = _this.derived[key].indexOf(cb);
              if (index !== -1) {
                return _this.derived[key].splice(index, 1);
              }
            };
          })(this)
        };
      };

      return Statistics;

    })();
    return new Statistics;
  });

}).call(this);
