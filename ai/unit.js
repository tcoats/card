// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['inject', 'p2'], function(inject, p2) {
    var Unit;
    return Unit = (function() {
      function Unit(entity, n) {
        this.align = __bind(this.align, this);
        this.step = __bind(this.step, this);
        this.e = entity;
        this.n = n;
      }

      Unit.prototype.step = function() {
        return this.align();
      };

      Unit.prototype.align = function() {
        var averageposition, dist, distances, force1, force2, force3, ideal1, ideal2, mid, normal1, normal2;
        averageposition = [0, 0];
        distances = [];
        inject.one('each by distance')(this.e.phys.b.position, 50, (function(_this) {
          return function(d, e) {
            if (e === _this.e || (e.ai == null)) {
              return;
            }
            return distances.push({
              d: d,
              e: e
            });
          };
        })(this));
        if (distances.length === 0) {
          return;
        }
        distances.sort(function(a, b) {
          if (a.d >= b.d) {
            return 1;
          } else {
            return -1;
          }
        });
        force1 = [0, 0];
        p2.vec2.sub(force1, distances[0].e.phys.b.position, this.e.phys.b.position);
        normal1 = [0, 0];
        p2.vec2.normalize(normal1, force1);
        ideal1 = [0, 0];
        p2.vec2.scale(ideal1, normal1, 20);
        p2.vec2.sub(force1, force1, ideal1);
        p2.vec2.scale(force1, force1, 10);
        inject.one('apply force')(this.e, force1);
        if (distances.length === 1) {
          return;
        }
        force2 = [0, 0];
        p2.vec2.sub(force2, distances[1].e.phys.b.position, this.e.phys.b.position);
        normal2 = [0, 0];
        p2.vec2.normalize(normal2, force2);
        ideal2 = [0, 0];
        p2.vec2.scale(ideal2, normal2, 20);
        p2.vec2.sub(force2, force2, ideal2);
        p2.vec2.scale(force2, force2, 10);
        inject.one('apply force')(this.e, force2);
        dist = p2.vec2.dist(distances[0].e.phys.b.position, distances[1].e.phys.b.position);
        if (dist < 20) {
          return;
        }
        mid = [0, 0];
        p2.vec2.add(mid, distances[0].e.phys.b.position, distances[1].e.phys.b.position);
        p2.vec2.scale(mid, mid, 0.5);
        force3 = [0, 0];
        p2.vec2.sub(force3, mid, this.e.phys.b.position);
        p2.vec2.normalize(force3, force3);
        p2.vec2.scale(force3, force3, 300);
        p2.vec2.scale(force3, force3, p2.vec2.dot(normal1, normal2));
        return inject.one('apply force')(this.e, force3);
      };

      return Unit;

    })();
  });

}).call(this);
