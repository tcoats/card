// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['infra/template'], function(template) {
    var Hub;
    Hub = (function() {
      function Hub() {
        this.emit = __bind(this.emit, this);
        this.one = __bind(this.one, this);
        this.on = __bind(this.on, this);
        this.listeners = {};
      }

      Hub.prototype.on = function(e, cb) {
        if (this.listeners[e] == null) {
          this.listeners[e] = [];
        }
        this.listeners[e].push(cb);
        return {
          off: (function(_this) {
            return function() {
              var index;
              index = _this.listeners[e].indexOf(cb);
              if (index !== -1) {
                return _this.listeners[e].splice(index, 1);
              }
            };
          })(this)
        };
      };

      Hub.prototype.one = function(e, cb) {
        var binding;
        binding = this.on(e, (function(_this) {
          return function(payload) {
            binding.off();
            return cb(payload);
          };
        })(this));
        return {
          off: function() {
            return binding.off();
          }
        };
      };

      Hub.prototype.saga = function(events, cb) {
        var bindings, count, e, _i, _len;
        count = 0;
        bindings = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = events.length; _i < _len; _i++) {
            e = events[_i];
            count++;
            _results.push({
              event: e,
              complete: false
            });
          }
          return _results;
        })();
        for (_i = 0, _len = bindings.length; _i < _len; _i++) {
          e = bindings[_i];
          e.binding = this.one(e.event, function() {
            count--;
            e.complete = true;
            if (count === 0) {
              return cb();
            }
          });
        }
        return {
          off: function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = bindings.length; _j < _len1; _j++) {
              e = bindings[_j];
              _results.push(e.binding.off());
            }
            return _results;
          }
        };
      };

      Hub.prototype.emit = function(e, payload) {
        var listener, _i, _len, _ref, _results;
        if (this.listeners[e] == null) {
          return;
        }
        _ref = this.listeners[e].slice();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          listener = _ref[_i];
          _results.push(listener(payload));
        }
        return _results;
      };

      return Hub;

    })();
    return new Hub();
  });

}).call(this);
